// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PlayerStats {
  id                 BigInt     @id @default(autoincrement())
  name               String
  avatar             String
  playerTable        PlayerTable
  color              String @default("oklch(0.372 0.044 257.287)")
  gamesPlayed        Int
  gamesWon           Int
  gamesLost          Int
  gamesDrawn         Int

  kills              Int
  deaths             Int
  assists            Int
  headshots          Int
  damage             Int
  roundsWon          Int
  totalRounds        Int
  aces               Int
  mvps               Int
  entryFrags         Int
  entryDeaths        Int

  killsThroughSmoke  Int 
  killsOnFlash       Int 
  killsThroughWall   Int
  killsInJump        Int

  flashesThrown    Int @default(0)
  smokesThrown     Int @default(0)
  heGrenadesThrown Int @default(0)
  molotovsThrown   Int @default(0)
  decoysThrown     Int @default(0)
  enemiesFlashed   Int @default(0)
  grenadeDamage    Int @default(0)
  bombPlants       Int @default(0)
  bombDefuses      Int @default(0)

  clutches1v1Played  Int
  clutches1v1Won     Int
  clutches1v2Played  Int
  clutches1v2Won     Int
  clutches1v3Played  Int
  clutches1v3Won     Int
  clutches1v4Played  Int
  clutches1v4Won     Int
  clutches1v5Played  Int
  clutches1v5Won     Int

  lastFiveMatchesOutcome String

  kda                Float
  kd                 Float

  winRatePercentage  Float
  headshotPercentage Float
  roundsWinPercentage Float

  damagePerRound     Float

  killsPerGame       Float
  deathsPerGame      Float
  assistsPerGame     Float
  headshotsPerGame   Float
  roundsWonPerGame   Float
  totalRoundsPerGame Float
  damagePerGame      Float
  mvpsPerGame        Float
  acesPerGame        Float
  entryFragsPerGame  Float
  entryKillRating    Float
  impactFactor       Float

  killsThroughSmokePerGame Float
  killsThroughWallPerGame  Float
  killsOnFlashPerGame      Float
  killsInJumpPerGame       Float

  flashesThrownPerGame      Float   @default(0)
  smokesThrownPerGame       Float   @default(0)
  heGrenadesThrownPerGame   Float   @default(0)
  molotovsThrownPerGame     Float   @default(0)
  decoysThrownPerGame       Float   @default(0)
  enemiesFlashedPerGame     Float   @default(0)
  grenadeDamagePerGame      Float   @default(0)
  bombPlantsPerGame         Float   @default(0)
  bombDefusesPerGame        Float   @default(0)

  clutches1v1WinPercentage Float
  clutches1v2WinPercentage Float
  clutches1v3WinPercentage Float
  clutches1v4WinPercentage Float
  clutches1v5WinPercentage Float

  weapons           WeaponStats[]
  maps              MapStats[]
}

model MapStats {
  id          Int    @id @default(autoincrement())
  name        String
  playerTable PlayerTable
  gamesPlayed Int        @default(0)
  gamesWon        Int        @default(0)
  gamesDrawn      Int        @default(0)
  gamesLost      Int        @default(0)
  winRatePercentage Float @default(0)
  totalGamesLength Float      @default(0)
  averageGameLength Float      @default(0)
  totalRounds Int        @default(0)
  roundsWon    Int        @default(0)
  roundsPerGame Float   @default(0)
  roundsWonPerGame Float @default(0)
  roundsWinPercentage Float @default(0)
  playerId    BigInt
  player      PlayerStats @relation(fields: [playerId], references: [id])
}

model WeaponStats {
  id          Int    @id @default(autoincrement())
  name        String
  playerTable PlayerTable

  kills       Int        @default(0)
  deaths      Int        @default(0)
  deathsWith  Int        @default(0)
  killsPerGame Float   @default(0)
  deathsPerGame Float  @default(0)
  kd           Float   @default(0)
  deathsWithPerGame Float @default(0)
  playerId    BigInt
  player      PlayerStats @relation(fields: [playerId], references: [id])
}

enum PlayerTable {
  SEASON
  SESSION
}